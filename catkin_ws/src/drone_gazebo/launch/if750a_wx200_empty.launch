<launch>
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(find drone_gazebo)/worlds/empty.world"/>
        <arg name="verbose" value="false"/>
        <arg name="paused" value="false"/>
        <arg name="use_sim_time" value="true"/>
        <arg name="gui" value="true" />
        <arg name="extra_gazebo_args" value=""/>
    </include>
    <!-- drone namespace -->
    <arg name="drone_ns" default="drone"/>

   
    <!-- PX4 -->
    <arg name="vehicle" default="if750a"/>

    <include file="$(find px4)/launch/px4.launch">
        <arg name="vehicle" value="$(arg vehicle)"/>
    </include>


    <!-- mavros -->
    <arg name="model" default="if750a"/>
    <arg name="fcu_url" default="udp://:14540@localhost:14557"/>
    <arg name="gcs_url" default="" />   
    <arg name="tgt_system" default="1" />
    <arg name="tgt_component" default="1" />

    <include file="$(find mavros)/launch/node.launch">
        <arg name="pluginlists_yaml" value="$(find mavros)/launch/px4_pluginlists.yaml" />
        <arg name="config_yaml" value="$(find drone_gazebo)/config/drone_config/px4_config.yaml" />
        <!-- px4_config_if750a_wx200.yaml -->
        <arg name="fcu_url" value="$(arg fcu_url)" />
        <arg name="gcs_url" value="$(arg gcs_url)" />
        <arg name="tgt_system" value="$(arg tgt_system)" />
        <arg name="tgt_component" value="$(arg tgt_component)" />

    </include>


	<!-- widowx200 -->
    <node pkg="tf" type="static_transform_publisher" name="tf_arm_link"
    args="0 0 0.23 -3.14 -3.14 0 drone/base_link wx200/base_link 50"/>

	<include file="$(find interbotix_xsarm_gazebo)/launch/wxarm_gazebo_control.launch">
		<arg name="robot_model" value="wx200"/>
        <arg name="use_position_controllers" value="true"/>
        <arg name="use_world_frame" value="false"/> 
	</include>

    <!-- camera optical frame for pointcloud -->
    <node pkg="tf" type="static_transform_publisher" name="tf_left_camera_optical_link"
    args="0 0 0 -1.57 0 -1.57 drone/left_camera_link drone/left_camera_optical_link 10"/>
    <node pkg="tf" type="static_transform_publisher" name="tf_right_camera_optical_link"
    args="0 0 0 -1.57 0 -1.57 drone/right_camera_link drone/right_camera_optical_link 10"/>
    <node pkg="tf" type="static_transform_publisher" name="tf_front_camera_optical_link"
    args="0 0 0 -1.57 0 -1.57 drone/front_camera_link drone/front_camera_optical_link 10"/>
    <node pkg="tf" type="static_transform_publisher" name="tf_downward_camera_optical_link"
    args="0 0 0 -1.57 0 -1.57 drone/downward_camera_link drone/downward_camera_optical_link 10"/>



    <!-- if750a drone-->
    <arg name="drone_x" default="0" />
    <arg name="drone_y" default="0" />
    <arg name="drone_z" default="0.3" />
    <arg name="drone_R" default="0" />
    <arg name="drone_P" default="0" />
    <arg name="drone_Y" default="0" />
    <!-- <node pkg="tf" type="static_transform_publisher" name="tf_drone_gazebo_origin"
    args="$(arg drone_x) $(arg drone_y) $(arg drone_z) $(arg drone_R) $(arg drone_P) $(arg drone_Y) map drone/local_origin 50"/> -->

    <!--spawn if750a_reverse_arm model-->
    <node name="spawn_model_drone" pkg="gazebo_ros" type="spawn_model"
    args="-x $(arg drone_x) -y $(arg drone_y) -z $(arg drone_z)
            -R $(arg drone_R) -P $(arg drone_P) -Y $(arg drone_Y)
            -sdf -database if750a_reverse_arm_heavy_base -model drone"/>
            <!-- if750a_reverse_arm -->
            <!-- quad_manipulator -->
    
    <param name="$(arg drone_ns)/robot_description" command="cat '/home/argrobotx/drone_ros/Firmware/Tools/sitl_gazebo/models/if750a_fix_motor/if750a_fix_motor.urdf'" />
    <group ns="$(arg drone_ns)">
        <node pkg="drone_gazebo" type="model_state_to_tf.py" name="model_state_to_tf">
            <param name="model_name" value="$(arg drone_ns)"/>
            <param name="model_tf_suffix" value="base_link"/>
            <param name="broadcast_rate" value="50"/>
        </node>

        <node pkg="drone_gazebo" type="model_state_to_pose_stamped.py" name="model_state_to_pose_stamped" output="log">
            <param name="model_name" value="$(arg drone_ns)"/>
            <param name="publish_rate" value="50"/>
        </node>

        <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
            <remap from="robot_description" to="robot_description" />
            <remap from="joint_states" to="joint_states" />
            <param name="tf_prefix" value="$(arg drone_ns)" />
        </node>

        <node pkg="drone_gazebo" type="if750a_joint_state_publisher.py" name="joint_state_publisher"/>
    </group>
    
    <!-- transfer image to compressed image for VR -->
    <include file = "$(find drone_perception)/launch/depth_compressed_transport.launch"/> 

    <!-- <node name="spawn_model_desk" pkg="gazebo_ros" type="spawn_model"
    args="-x 2  -y 2 -z 0
            -R 0 -P 0 -Y 0
            -sdf -database foldable_table  -model table"/>
    <node name="spawn_model_desk1" pkg="gazebo_ros" type="spawn_model"
    args="-x 2  -y 1.225 -z 0
            -R 0 -P 0 -Y 0
            -sdf -database foldable_table  -model table1"/>
    <node name="spawn_model_desk2" pkg="gazebo_ros" type="spawn_model"
    args="-x 2  -y 2.77 -z 0
            -R 0 -P 0 -Y 0
            -sdf -database foldable_table  -model table2"/>


    <node name="spawn_model_pole" pkg="gazebo_ros" type="spawn_model"
    args="-x 2 -y 2 -z 1.21
            -R 0 -P 0 -Y 0            
            -sdf -database red_pole  -model red_pole"/> -->

</launch>